// This file is @generated by wasmcloud/weld-codegen 0.6.0.
// It is not intended for manual editing.
// namespace: org.wasmcloud.interface.sensors

#[allow(unused_imports)]
use async_trait::async_trait;
#[allow(unused_imports)]
use serde::{Deserialize, Serialize};
#[allow(unused_imports)]
use std::{borrow::Borrow, borrow::Cow, io::Write, string::ToString};
#[allow(unused_imports)]
use wasmbus_rpc::{
    cbor::*,
    common::{
        deserialize, message_format, serialize, Context, Message, MessageDispatch, MessageFormat,
        SendOpts, Transport,
    },
    error::{RpcError, RpcResult},
    Timestamp,
};

#[allow(dead_code)]
pub const SMITHY_VERSION: &str = "1.0";

/// List of floating point values
pub type FloatList = Vec<f32>;

// Encode FloatList as CBOR and append to output stream
#[doc(hidden)]
#[allow(unused_mut)]
pub fn encode_float_list<W: wasmbus_rpc::cbor::Write>(
    mut e: &mut wasmbus_rpc::cbor::Encoder<W>,
    val: &FloatList,
) -> RpcResult<()>
where
    <W as wasmbus_rpc::cbor::Write>::Error: std::fmt::Display,
{
    e.array(val.len() as u64)?;
    for item in val.iter() {
        e.f32(*item)?;
    }
    Ok(())
}

// Decode FloatList from cbor input stream
#[doc(hidden)]
pub fn decode_float_list(d: &mut wasmbus_rpc::cbor::Decoder<'_>) -> Result<FloatList, RpcError> {
    let __result = {
        if let Some(n) = d.array()? {
            let mut arr: Vec<f32> = Vec::with_capacity(n as usize);
            for _ in 0..(n as usize) {
                arr.push(d.f32()?)
            }
            arr
        } else {
            // indefinite array
            let mut arr: Vec<f32> = Vec::new();
            loop {
                match d.datatype() {
                    Err(_) => break,
                    Ok(wasmbus_rpc::cbor::Type::Break) => break,
                    Ok(_) => arr.push(d.f32()?),
                }
            }
            arr
        }
    };
    Ok(__result)
}
/// Indicates a failure to obtain or produce a measurement
#[derive(Clone, Debug, Default, Deserialize, Eq, PartialEq, Serialize)]
pub struct MeasurementError {
    #[serde(rename = "errorMessage")]
    #[serde(default)]
    pub error_message: String,
    /// Network ID (optional)
    #[serde(rename = "networkId")]
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub network_id: Option<String>,
    /// Sensor ID associated with the error. Optional
    #[serde(rename = "sensorId")]
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub sensor_id: Option<String>,
    /// Type of the sensor on which the error occurred. Optional
    #[serde(rename = "sensorType")]
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub sensor_type: Option<String>,
    /// Timestamp when the error occurred
    #[serde(default)]
    pub timestamp: u64,
}

// Encode MeasurementError as CBOR and append to output stream
#[doc(hidden)]
#[allow(unused_mut)]
pub fn encode_measurement_error<W: wasmbus_rpc::cbor::Write>(
    mut e: &mut wasmbus_rpc::cbor::Encoder<W>,
    val: &MeasurementError,
) -> RpcResult<()>
where
    <W as wasmbus_rpc::cbor::Write>::Error: std::fmt::Display,
{
    e.map(5)?;
    e.str("errorMessage")?;
    e.str(&val.error_message)?;
    if let Some(val) = val.network_id.as_ref() {
        e.str("networkId")?;
        e.str(val)?;
    } else {
        e.null()?;
    }
    if let Some(val) = val.sensor_id.as_ref() {
        e.str("sensorId")?;
        e.str(val)?;
    } else {
        e.null()?;
    }
    if let Some(val) = val.sensor_type.as_ref() {
        e.str("sensorType")?;
        e.str(val)?;
    } else {
        e.null()?;
    }
    e.str("timestamp")?;
    e.u64(val.timestamp)?;
    Ok(())
}

// Decode MeasurementError from cbor input stream
#[doc(hidden)]
pub fn decode_measurement_error(
    d: &mut wasmbus_rpc::cbor::Decoder<'_>,
) -> Result<MeasurementError, RpcError> {
    let __result = {
        let mut error_message: Option<String> = None;
        let mut network_id: Option<Option<String>> = Some(None);
        let mut sensor_id: Option<Option<String>> = Some(None);
        let mut sensor_type: Option<Option<String>> = Some(None);
        let mut timestamp: Option<u64> = None;

        let is_array = match d.datatype()? {
            wasmbus_rpc::cbor::Type::Array => true,
            wasmbus_rpc::cbor::Type::Map => false,
            _ => {
                return Err(RpcError::Deser(
                    "decoding struct MeasurementError, expected array or map".to_string(),
                ))
            }
        };
        if is_array {
            let len = d.fixed_array()?;
            for __i in 0..(len as usize) {
                match __i {
                    0 => error_message = Some(d.str()?.to_string()),
                    1 => {
                        network_id = if wasmbus_rpc::cbor::Type::Null == d.datatype()? {
                            d.skip()?;
                            Some(None)
                        } else {
                            Some(Some(d.str()?.to_string()))
                        }
                    }
                    2 => {
                        sensor_id = if wasmbus_rpc::cbor::Type::Null == d.datatype()? {
                            d.skip()?;
                            Some(None)
                        } else {
                            Some(Some(d.str()?.to_string()))
                        }
                    }
                    3 => {
                        sensor_type = if wasmbus_rpc::cbor::Type::Null == d.datatype()? {
                            d.skip()?;
                            Some(None)
                        } else {
                            Some(Some(d.str()?.to_string()))
                        }
                    }
                    4 => timestamp = Some(d.u64()?),
                    _ => d.skip()?,
                }
            }
        } else {
            let len = d.fixed_map()?;
            for __i in 0..(len as usize) {
                match d.str()? {
                    "errorMessage" => error_message = Some(d.str()?.to_string()),
                    "networkId" => {
                        network_id = if wasmbus_rpc::cbor::Type::Null == d.datatype()? {
                            d.skip()?;
                            Some(None)
                        } else {
                            Some(Some(d.str()?.to_string()))
                        }
                    }
                    "sensorId" => {
                        sensor_id = if wasmbus_rpc::cbor::Type::Null == d.datatype()? {
                            d.skip()?;
                            Some(None)
                        } else {
                            Some(Some(d.str()?.to_string()))
                        }
                    }
                    "sensorType" => {
                        sensor_type = if wasmbus_rpc::cbor::Type::Null == d.datatype()? {
                            d.skip()?;
                            Some(None)
                        } else {
                            Some(Some(d.str()?.to_string()))
                        }
                    }
                    "timestamp" => timestamp = Some(d.u64()?),
                    _ => d.skip()?,
                }
            }
        }
        MeasurementError {
            error_message: if let Some(__x) = error_message {
                __x
            } else {
                return Err(RpcError::Deser(
                    "missing field MeasurementError.error_message (#0)".to_string(),
                ));
            },
            network_id: network_id.unwrap(),
            sensor_id: sensor_id.unwrap(),
            sensor_type: sensor_type.unwrap(),

            timestamp: if let Some(__x) = timestamp {
                __x
            } else {
                return Err(RpcError::Deser(
                    "missing field MeasurementError.timestamp (#4)".to_string(),
                ));
            },
        }
    };
    Ok(__result)
}
/// Represents a single measurement that originates from a sensor
#[derive(Clone, Debug, Default, Deserialize, Eq, PartialEq, Serialize)]
pub struct MeasurementRecord {
    /// The data contained within the measurement. Must contain at least one value. Measurements
    /// should never be delivered with an empty payload
    pub data: FloatList,
    /// The network ID from which the measurement originated. This value is optional
    #[serde(rename = "networkId")]
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub network_id: Option<String>,
    /// The ID of the sensor from which the measurement originated.
    #[serde(rename = "sensorId")]
    #[serde(default)]
    pub sensor_id: String,
    /// The type of the sensor. The value of the sensor type is understood by consumer
    /// and producer and is not dictated by the interface or contained in an interface
    /// enumeration/union.
    #[serde(rename = "sensorType")]
    #[serde(default)]
    pub sensor_type: String,
    /// UNIX timestamp indicating when the measurement occurred. Timezone is opaque though recommended
    /// that it should be in UTC
    #[serde(default)]
    pub timestamp: u64,
}

// Encode MeasurementRecord as CBOR and append to output stream
#[doc(hidden)]
#[allow(unused_mut)]
pub fn encode_measurement_record<W: wasmbus_rpc::cbor::Write>(
    mut e: &mut wasmbus_rpc::cbor::Encoder<W>,
    val: &MeasurementRecord,
) -> RpcResult<()>
where
    <W as wasmbus_rpc::cbor::Write>::Error: std::fmt::Display,
{
    e.map(5)?;
    e.str("data")?;
    encode_float_list(e, &val.data)?;
    if let Some(val) = val.network_id.as_ref() {
        e.str("networkId")?;
        e.str(val)?;
    } else {
        e.null()?;
    }
    e.str("sensorId")?;
    e.str(&val.sensor_id)?;
    e.str("sensorType")?;
    e.str(&val.sensor_type)?;
    e.str("timestamp")?;
    e.u64(val.timestamp)?;
    Ok(())
}

// Decode MeasurementRecord from cbor input stream
#[doc(hidden)]
pub fn decode_measurement_record(
    d: &mut wasmbus_rpc::cbor::Decoder<'_>,
) -> Result<MeasurementRecord, RpcError> {
    let __result = {
        let mut data: Option<FloatList> = None;
        let mut network_id: Option<Option<String>> = Some(None);
        let mut sensor_id: Option<String> = None;
        let mut sensor_type: Option<String> = None;
        let mut timestamp: Option<u64> = None;

        let is_array = match d.datatype()? {
            wasmbus_rpc::cbor::Type::Array => true,
            wasmbus_rpc::cbor::Type::Map => false,
            _ => {
                return Err(RpcError::Deser(
                    "decoding struct MeasurementRecord, expected array or map".to_string(),
                ))
            }
        };
        if is_array {
            let len = d.fixed_array()?;
            for __i in 0..(len as usize) {
                match __i {
                    0 => {
                        data = Some(decode_float_list(d).map_err(|e| {
                            format!(
                                "decoding 'org.wasmcloud.interface.sensors#FloatList': {}",
                                e
                            )
                        })?)
                    }
                    1 => {
                        network_id = if wasmbus_rpc::cbor::Type::Null == d.datatype()? {
                            d.skip()?;
                            Some(None)
                        } else {
                            Some(Some(d.str()?.to_string()))
                        }
                    }
                    2 => sensor_id = Some(d.str()?.to_string()),
                    3 => sensor_type = Some(d.str()?.to_string()),
                    4 => timestamp = Some(d.u64()?),
                    _ => d.skip()?,
                }
            }
        } else {
            let len = d.fixed_map()?;
            for __i in 0..(len as usize) {
                match d.str()? {
                    "data" => {
                        data = Some(decode_float_list(d).map_err(|e| {
                            format!(
                                "decoding 'org.wasmcloud.interface.sensors#FloatList': {}",
                                e
                            )
                        })?)
                    }
                    "networkId" => {
                        network_id = if wasmbus_rpc::cbor::Type::Null == d.datatype()? {
                            d.skip()?;
                            Some(None)
                        } else {
                            Some(Some(d.str()?.to_string()))
                        }
                    }
                    "sensorId" => sensor_id = Some(d.str()?.to_string()),
                    "sensorType" => sensor_type = Some(d.str()?.to_string()),
                    "timestamp" => timestamp = Some(d.u64()?),
                    _ => d.skip()?,
                }
            }
        }
        MeasurementRecord {
            data: if let Some(__x) = data {
                __x
            } else {
                return Err(RpcError::Deser(
                    "missing field MeasurementRecord.data (#0)".to_string(),
                ));
            },
            network_id: network_id.unwrap(),

            sensor_id: if let Some(__x) = sensor_id {
                __x
            } else {
                return Err(RpcError::Deser(
                    "missing field MeasurementRecord.sensor_id (#2)".to_string(),
                ));
            },

            sensor_type: if let Some(__x) = sensor_type {
                __x
            } else {
                return Err(RpcError::Deser(
                    "missing field MeasurementRecord.sensor_type (#3)".to_string(),
                ));
            },

            timestamp: if let Some(__x) = timestamp {
                __x
            } else {
                return Err(RpcError::Deser(
                    "missing field MeasurementRecord.timestamp (#4)".to_string(),
                ));
            },
        }
    };
    Ok(__result)
}
/// A query for the latest data value from the sensor. Note that sensor type is not supplied
/// in order to query the latest value
#[derive(Clone, Debug, Default, Deserialize, Eq, PartialEq, Serialize)]
pub struct SensorQuery {
    /// If supplied, indicates the network ID for the sensor being queried
    #[serde(rename = "networkId")]
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub network_id: Option<String>,
    /// Indicates the ID of the sensor being queried
    #[serde(rename = "sensorId")]
    #[serde(default)]
    pub sensor_id: String,
}

// Encode SensorQuery as CBOR and append to output stream
#[doc(hidden)]
#[allow(unused_mut)]
pub fn encode_sensor_query<W: wasmbus_rpc::cbor::Write>(
    mut e: &mut wasmbus_rpc::cbor::Encoder<W>,
    val: &SensorQuery,
) -> RpcResult<()>
where
    <W as wasmbus_rpc::cbor::Write>::Error: std::fmt::Display,
{
    e.map(2)?;
    if let Some(val) = val.network_id.as_ref() {
        e.str("networkId")?;
        e.str(val)?;
    } else {
        e.null()?;
    }
    e.str("sensorId")?;
    e.str(&val.sensor_id)?;
    Ok(())
}

// Decode SensorQuery from cbor input stream
#[doc(hidden)]
pub fn decode_sensor_query(
    d: &mut wasmbus_rpc::cbor::Decoder<'_>,
) -> Result<SensorQuery, RpcError> {
    let __result = {
        let mut network_id: Option<Option<String>> = Some(None);
        let mut sensor_id: Option<String> = None;

        let is_array = match d.datatype()? {
            wasmbus_rpc::cbor::Type::Array => true,
            wasmbus_rpc::cbor::Type::Map => false,
            _ => {
                return Err(RpcError::Deser(
                    "decoding struct SensorQuery, expected array or map".to_string(),
                ))
            }
        };
        if is_array {
            let len = d.fixed_array()?;
            for __i in 0..(len as usize) {
                match __i {
                    0 => {
                        network_id = if wasmbus_rpc::cbor::Type::Null == d.datatype()? {
                            d.skip()?;
                            Some(None)
                        } else {
                            Some(Some(d.str()?.to_string()))
                        }
                    }
                    1 => sensor_id = Some(d.str()?.to_string()),
                    _ => d.skip()?,
                }
            }
        } else {
            let len = d.fixed_map()?;
            for __i in 0..(len as usize) {
                match d.str()? {
                    "networkId" => {
                        network_id = if wasmbus_rpc::cbor::Type::Null == d.datatype()? {
                            d.skip()?;
                            Some(None)
                        } else {
                            Some(Some(d.str()?.to_string()))
                        }
                    }
                    "sensorId" => sensor_id = Some(d.str()?.to_string()),
                    _ => d.skip()?,
                }
            }
        }
        SensorQuery {
            network_id: network_id.unwrap(),

            sensor_id: if let Some(__x) = sensor_id {
                __x
            } else {
                return Err(RpcError::Deser(
                    "missing field SensorQuery.sensor_id (#1)".to_string(),
                ));
            },
        }
    };
    Ok(__result)
}
/// Results of a sensor query
#[derive(Clone, Debug, Default, Deserialize, Eq, PartialEq, Serialize)]
pub struct SensorQueryResult {
    /// An optional result containing the most recent measurement record for the given
    /// sensor
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub result: Option<MeasurementRecord>,
}

// Encode SensorQueryResult as CBOR and append to output stream
#[doc(hidden)]
#[allow(unused_mut)]
pub fn encode_sensor_query_result<W: wasmbus_rpc::cbor::Write>(
    mut e: &mut wasmbus_rpc::cbor::Encoder<W>,
    val: &SensorQueryResult,
) -> RpcResult<()>
where
    <W as wasmbus_rpc::cbor::Write>::Error: std::fmt::Display,
{
    e.map(1)?;
    if let Some(val) = val.result.as_ref() {
        e.str("result")?;
        encode_measurement_record(e, val)?;
    } else {
        e.null()?;
    }
    Ok(())
}

// Decode SensorQueryResult from cbor input stream
#[doc(hidden)]
pub fn decode_sensor_query_result(
    d: &mut wasmbus_rpc::cbor::Decoder<'_>,
) -> Result<SensorQueryResult, RpcError> {
    let __result = {
        let mut result: Option<Option<MeasurementRecord>> = Some(None);

        let is_array = match d.datatype()? {
            wasmbus_rpc::cbor::Type::Array => true,
            wasmbus_rpc::cbor::Type::Map => false,
            _ => {
                return Err(RpcError::Deser(
                    "decoding struct SensorQueryResult, expected array or map".to_string(),
                ))
            }
        };
        if is_array {
            let len = d.fixed_array()?;
            for __i in 0..(len as usize) {
                match __i {
                    0 => {
                        result = if wasmbus_rpc::cbor::Type::Null == d.datatype()? {
                            d.skip()?;
                            Some(None)
                        } else {
                            Some(Some( decode_measurement_record(d).map_err(|e| format!("decoding 'org.wasmcloud.interface.sensors#MeasurementRecord': {}", e))? ))
                        }
                    }

                    _ => d.skip()?,
                }
            }
        } else {
            let len = d.fixed_map()?;
            for __i in 0..(len as usize) {
                match d.str()? {
                    "result" => {
                        result = if wasmbus_rpc::cbor::Type::Null == d.datatype()? {
                            d.skip()?;
                            Some(None)
                        } else {
                            Some(Some( decode_measurement_record(d).map_err(|e| format!("decoding 'org.wasmcloud.interface.sensors#MeasurementRecord': {}", e))? ))
                        }
                    }
                    _ => d.skip()?,
                }
            }
        }
        SensorQueryResult {
            result: result.unwrap(),
        }
    };
    Ok(__result)
}
/// wasmbus.contractId: wasmcloud:sensors
/// wasmbus.actorReceive
#[async_trait]
pub trait SensorListener {
    /// returns the capability contract id for this interface
    fn contract_id() -> &'static str {
        "wasmcloud:sensors"
    }
    /// Handles a measurement delivered by some provider of this service. Measurements are delivered
    /// to a component without need for a reply
    async fn handle_measurement(&self, ctx: &Context, arg: &MeasurementRecord) -> RpcResult<()>;
    /// Handles an error in the sensor. This is not to be confused with a value delivery with a
    /// value within error limits. This indicates a failure to obtain or produce a measurement.
    async fn handle_error(&self, ctx: &Context, arg: &MeasurementError) -> RpcResult<()>;
}

/// SensorListenerReceiver receives messages defined in the SensorListener service trait
#[doc(hidden)]
#[async_trait]
pub trait SensorListenerReceiver: MessageDispatch + SensorListener {
    async fn dispatch(&self, ctx: &Context, message: Message<'_>) -> Result<Vec<u8>, RpcError> {
        match message.method {
            "HandleMeasurement" => {
                let value: MeasurementRecord = wasmbus_rpc::common::deserialize(&message.arg)
                    .map_err(|e| RpcError::Deser(format!("'MeasurementRecord': {}", e)))?;

                let _resp = SensorListener::handle_measurement(self, ctx, &value).await?;
                let buf = Vec::new();
                Ok(buf)
            }
            "HandleError" => {
                let value: MeasurementError = wasmbus_rpc::common::deserialize(&message.arg)
                    .map_err(|e| RpcError::Deser(format!("'MeasurementError': {}", e)))?;

                let _resp = SensorListener::handle_error(self, ctx, &value).await?;
                let buf = Vec::new();
                Ok(buf)
            }
            _ => Err(RpcError::MethodNotHandled(format!(
                "SensorListener::{}",
                message.method
            ))),
        }
    }
}

/// SensorListenerSender sends messages to a SensorListener service
/// client for sending SensorListener messages
#[derive(Debug)]
pub struct SensorListenerSender<T: Transport> {
    transport: T,
}

impl<T: Transport> SensorListenerSender<T> {
    /// Constructs a SensorListenerSender with the specified transport
    pub fn via(transport: T) -> Self {
        Self { transport }
    }

    pub fn set_timeout(&self, interval: std::time::Duration) {
        self.transport.set_timeout(interval);
    }
}

#[cfg(not(target_arch = "wasm32"))]
impl<'send> SensorListenerSender<wasmbus_rpc::provider::ProviderTransport<'send>> {
    /// Constructs a Sender using an actor's LinkDefinition,
    /// Uses the provider's HostBridge for rpc
    pub fn for_actor(ld: &'send wasmbus_rpc::core::LinkDefinition) -> Self {
        Self {
            transport: wasmbus_rpc::provider::ProviderTransport::new(ld, None),
        }
    }
}
#[cfg(target_arch = "wasm32")]
impl SensorListenerSender<wasmbus_rpc::actor::prelude::WasmHost> {
    /// Constructs a client for actor-to-actor messaging
    /// using the recipient actor's public key
    pub fn to_actor(actor_id: &str) -> Self {
        let transport =
            wasmbus_rpc::actor::prelude::WasmHost::to_actor(actor_id.to_string()).unwrap();
        Self { transport }
    }
}
#[async_trait]
impl<T: Transport + std::marker::Sync + std::marker::Send> SensorListener
    for SensorListenerSender<T>
{
    #[allow(unused)]
    /// Handles a measurement delivered by some provider of this service. Measurements are delivered
    /// to a component without need for a reply
    async fn handle_measurement(&self, ctx: &Context, arg: &MeasurementRecord) -> RpcResult<()> {
        let buf = wasmbus_rpc::common::serialize(arg)?;

        let resp = self
            .transport
            .send(
                ctx,
                Message {
                    method: "SensorListener.HandleMeasurement",
                    arg: Cow::Borrowed(&buf),
                },
                None,
            )
            .await?;
        Ok(())
    }
    #[allow(unused)]
    /// Handles an error in the sensor. This is not to be confused with a value delivery with a
    /// value within error limits. This indicates a failure to obtain or produce a measurement.
    async fn handle_error(&self, ctx: &Context, arg: &MeasurementError) -> RpcResult<()> {
        let buf = wasmbus_rpc::common::serialize(arg)?;

        let resp = self
            .transport
            .send(
                ctx,
                Message {
                    method: "SensorListener.HandleError",
                    arg: Cow::Borrowed(&buf),
                },
                None,
            )
            .await?;
        Ok(())
    }
}

/// wasmbus.contractId: wasmcloud:sensors
/// wasmbus.providerReceive
#[async_trait]
pub trait Sensors {
    /// returns the capability contract id for this interface
    fn contract_id() -> &'static str {
        "wasmcloud:sensors"
    }
    /// Query supplied to a provider of this interface to obtain the most recent (if any) value of a sensor
    async fn query_sensor(&self, ctx: &Context, arg: &SensorQuery) -> RpcResult<SensorQueryResult>;
}

/// SensorsReceiver receives messages defined in the Sensors service trait
#[doc(hidden)]
#[async_trait]
pub trait SensorsReceiver: MessageDispatch + Sensors {
    async fn dispatch(&self, ctx: &Context, message: Message<'_>) -> Result<Vec<u8>, RpcError> {
        match message.method {
            "QuerySensor" => {
                let value: SensorQuery = wasmbus_rpc::common::deserialize(&message.arg)
                    .map_err(|e| RpcError::Deser(format!("'SensorQuery': {}", e)))?;

                let resp = Sensors::query_sensor(self, ctx, &value).await?;
                let buf = wasmbus_rpc::common::serialize(&resp)?;

                Ok(buf)
            }
            _ => Err(RpcError::MethodNotHandled(format!(
                "Sensors::{}",
                message.method
            ))),
        }
    }
}

/// SensorsSender sends messages to a Sensors service
/// client for sending Sensors messages
#[derive(Debug)]
pub struct SensorsSender<T: Transport> {
    transport: T,
}

impl<T: Transport> SensorsSender<T> {
    /// Constructs a SensorsSender with the specified transport
    pub fn via(transport: T) -> Self {
        Self { transport }
    }

    pub fn set_timeout(&self, interval: std::time::Duration) {
        self.transport.set_timeout(interval);
    }
}

#[cfg(target_arch = "wasm32")]
impl SensorsSender<wasmbus_rpc::actor::prelude::WasmHost> {
    /// Constructs a client for sending to a Sensors provider
    /// implementing the 'wasmcloud:sensors' capability contract, with the "default" link
    pub fn new() -> Self {
        let transport =
            wasmbus_rpc::actor::prelude::WasmHost::to_provider("wasmcloud:sensors", "default")
                .unwrap();
        Self { transport }
    }

    /// Constructs a client for sending to a Sensors provider
    /// implementing the 'wasmcloud:sensors' capability contract, with the specified link name
    pub fn new_with_link(link_name: &str) -> wasmbus_rpc::error::RpcResult<Self> {
        let transport =
            wasmbus_rpc::actor::prelude::WasmHost::to_provider("wasmcloud:sensors", link_name)?;
        Ok(Self { transport })
    }
}
#[async_trait]
impl<T: Transport + std::marker::Sync + std::marker::Send> Sensors for SensorsSender<T> {
    #[allow(unused)]
    /// Query supplied to a provider of this interface to obtain the most recent (if any) value of a sensor
    async fn query_sensor(&self, ctx: &Context, arg: &SensorQuery) -> RpcResult<SensorQueryResult> {
        let buf = wasmbus_rpc::common::serialize(arg)?;

        let resp = self
            .transport
            .send(
                ctx,
                Message {
                    method: "Sensors.QuerySensor",
                    arg: Cow::Borrowed(&buf),
                },
                None,
            )
            .await?;

        let value: SensorQueryResult = wasmbus_rpc::common::deserialize(&resp)
            .map_err(|e| RpcError::Deser(format!("'{}': SensorQueryResult", e)))?;
        Ok(value)
    }
}
