# codegen.toml

# `models` contains a list of smithy model file(s),
# and folder(s) containing .smithy files, used for input to code generators,
# documentation generator, and linting and validation.
# Dependencies of the model should also be included in the `models` list
# because they will improve documentation and validation.
#
# The namespaces(s) that will be generated for this library are indicated
# in the per-language file settings later in this file.

[[models]]
path = "."
files = [ "mlinference.smithy" ]

[[models]]
# wasmbus-core
url = "https://cdn.jsdelivr.net/gh/wasmcloud/interfaces@d6ae2dd196aae3c2486e747eb1b3cd188ea71132/core/wasmcloud-core.smithy"

[[models]]
# wasmbus-model
url = "https://cdn.jsdelivr.net/gh/wasmcloud/interfaces@e0f205da8a0e1549497571c3e994a1851480621c/core/wasmcloud-model.smithy"

##
## HTML documentation output
##
[html]

# (optional) template dir to scan (overrides compiled-in templates)
#templates = "docgen/templates"
# Top-level output directory for html generated files
output_dir = "html"

# Additional parameters for html generation
[html.parameters]

# name of template for page generation (default: 'namespace_doc')
#doc_template = "namespace_doc"

# whether to use minified tailwind.css (default false)
minified = true


##
## Rust language output
##
[rust]

# top-level output directory for rust files.
output_dir = "rust"

[rust.parameters]

# File-specific settings contain the following settings
# [[rust.files]]
# path - (required) path for generated output file, relative to output_dir above
# hbs - handlebars template name (without .hbs extension)
# Only applicable if file is generated by a handlebars template
# create_only - whether file should be generated only with --create (default false)
# namespace - limit generated shapes to shapes in this namespace
# * - any other fields are per-file parameters passed to codegen and renderer

# Additional namespaces may be added to this library crate by adding
# a rust source file below for each namespace,
# and importing each of them into src/lib.rs

[[rust.files]]
path = "src/mlinference.rs"
namespace = "org.wasmcloud.interface.mlinference"
